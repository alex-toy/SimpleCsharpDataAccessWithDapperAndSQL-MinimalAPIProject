/*
Deployment script for MinimalAPIUserDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MinimalAPIUserDb"
:setvar DefaultFilePrefix "MinimalAPIUserDb"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Procedure [dbo].[Article_Delete]...';


GO
CREATE PROCEDURE [dbo].[Article_Delete]
	@Id int = 0
AS
BEGIN
	DELETE FROM dbo.[Article] WHERE Id = @Id;
END
GO
PRINT N'Creating Procedure [dbo].[Article_Get]...';


GO
CREATE PROCEDURE [dbo].[Article_Get]
	@Id int = 0
AS
BEGIN
	SELECT * FROM dbo.[Article] WHERE Id = @Id
END
GO
PRINT N'Creating Procedure [dbo].[Article_Update]...';


GO
CREATE PROCEDURE [dbo].[Article_Update]
	@Id int = 0,
	@name nvarchar(20),
	@description nvarchar(50),
	@price FLOAT
AS
BEGIN
	UPDATE dbo.[Article]
	SET Name = @name, Description = @description, Price = @price
	WHERE Id = @Id;
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
IF NOT EXISTS (SELECT 1 FROM dbo.[User]) BEGIN
    INSERT INTO dbo.[User] (FirstName, LastName)
    VALUES 
        ('alexei', 'reaktor'),
        ('shirley', 'pepette'),
        ('william', 'amin');
END

IF NOT EXISTS (SELECT 1 FROM dbo.[Article]) BEGIN
    INSERT INTO dbo.[Article] (Name, Description, Price)
    VALUES 
        ('pants', 'pretty', 12),
        ('shirt', 'nice', 14);
END
GO

GO
PRINT N'Update complete.';


GO
